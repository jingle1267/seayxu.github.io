<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>seay&#39;s blog</title>
  <subtitle>personal blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.seay.me/"/>
  <updated>2016-08-13T05:50:25.217Z</updated>
  <id>http://blog.seay.me/</id>
  
  <author>
    <name>Seay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Windows中搭建Ruby开发环境</title>
    <link href="http://blog.seay.me/post/2016-03-30-Ruby-Install-On-Windows.html"/>
    <id>http://blog.seay.me/post/2016-03-30-Ruby-Install-On-Windows.html</id>
    <published>2016-03-30T14:49:09.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows中搭建Ruby开发环境教程"><a href="#Windows中搭建Ruby开发环境教程" class="headerlink" title="Windows中搭建Ruby开发环境教程"></a>Windows中搭建Ruby开发环境教程</h1><h1 id="1-下载RubyInstaller"><a href="#1-下载RubyInstaller" class="headerlink" title="1. 下载RubyInstaller"></a>1. 下载RubyInstaller</h1><p>   去<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">RubyInstaller.org</a>官网中下载</p>
<h1 id="2-安装Ruby"><a href="#2-安装Ruby" class="headerlink" title="2. 安装Ruby"></a>2. 安装Ruby</h1><p>   双击Ruby安装包 <code>RubyInstaller</code>,直接下一步操作就可以了。<br>   等安装完成,运行命令:<code>ruby -v</code>,显示版本号就说明安装成功。</p>
<h1 id="3-安装Devkit"><a href="#3-安装Devkit" class="headerlink" title="3. 安装Devkit"></a>3. 安装Devkit</h1><ul>
<li>在<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">rubyinstaller.org</a>上下载相对应版本的Devkit;</li>
<li>解压下载的DevKit,选择解压的路径，这个路径就是DevKit的安装路径;</li>
<li>进入到Devkit的目录,在命令窗口运行命令:<code>ruby dk.rb init</code>,将会产生一个配置文件<code>config.yml</code>;</li>
<li>打开<code>config.yml</code>文件,将<code>ruby</code>的安装路径加上,格式是:<code>-+空格+ruby安装目录</code>,如下:<code>- C:\Program\Ruby\2.2.4</code><br><img src="https://segmentfault.com/img/bVtObG" alt="ruby-devkit-config.yml"></li>
<li>然后执行安装命令<code>ruby dk.rb install</code>.</li>
</ul>
<h1 id="4-安装RubyGems"><a href="#4-安装RubyGems" class="headerlink" title="4. 安装RubyGems"></a>4. 安装RubyGems</h1><ul>
<li><p>下载<code>RubyGems</code> package:<br><a href="https://rubygems.org/pages/download" target="_blank" rel="external">rubygems.org</a> <a href="https://github.com/rubygems/rubygems/releases" target="_blank" rel="external">github.com</a></p>
</li>
<li><p>解压下载的压缩包;</p>
</li>
<li>进入解压的目录,执行安装命令<code>ruby setup.rb</code>,等待安装完成;</li>
<li>安装完成后,执行命令<code>gem -v</code>,如果打印出版本号，即安装成功.</li>
</ul>
<h1 id="5-收工"><a href="#5-收工" class="headerlink" title="5. 收工"></a>5. 收工</h1><p>   至此,Ruby的开发环境基本完成,可以愉快的写<code>Hello World</code>了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Windows中搭建Ruby开发环境教程&quot;&gt;&lt;a href=&quot;#Windows中搭建Ruby开发环境教程&quot; class=&quot;headerlink&quot; title=&quot;Windows中搭建Ruby开发环境教程&quot;&gt;&lt;/a&gt;Windows中搭建Ruby开发环境教程&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Ruby" scheme="http://blog.seay.me/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://blog.seay.me/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>在linux shell中显示git状态</title>
    <link href="http://blog.seay.me/post/2016-03-27-linux-shell-show-git-status.html"/>
    <id>http://blog.seay.me/post/2016-03-27-linux-shell-show-git-status.html</id>
    <published>2016-03-27T15:07:25.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Clone-git-source-code"><a href="#Clone-git-source-code" class="headerlink" title="Clone git source code"></a>Clone git source code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/git/git.git ~/git</div></pre></td></tr></table></figure>
<h1 id="Copy-Bash-and-Shell-script"><a href="#Copy-Bash-and-Shell-script" class="headerlink" title="Copy Bash and Shell script"></a>Copy Bash and Shell script</h1><blockquote>
<p>是指在git源码中<code>contrib/completion/</code>目录下的<code>git-completion.bash</code>和<code>git-prompt.sh</code><br>将这两个文件拷贝到指定目录,只要自己知道就好.<br>在这里直接拷贝至用户目录~.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#进入git源码目录</div><div class="line">cd ~/git</div><div class="line">#进入git源码completion目录</div><div class="line">cd contrib/completion</div><div class="line"># 拷贝git-completion.bash文件</div><div class="line">cp git-completion.bash ~/.git-completion.sh</div><div class="line"># 拷贝git-prompt.sh文件</div><div class="line">cp git-prompt.sh ~/.git-prompt.sh</div></pre></td></tr></table></figure>
<h1 id="Edit-bashrc-file"><a href="#Edit-bashrc-file" class="headerlink" title="Edit .bashrc file"></a>Edit .bashrc file</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source ~/.git-completion.sh</div><div class="line">source ~/.git-prompt.sh</div><div class="line">export GIT_PS1_SHOWDIRTYSTATE=1</div><div class="line">export GIT_PS1_SHOWSTASHSTATE=1</div><div class="line">export GIT_PS1_SHOWUNTRACKEDFILES=1</div><div class="line">export GIT_PS1_SHOWUPSTREAM=&quot;verbose git svn&quot;</div><div class="line">PS1=&apos;\[\033[1;31m\]\u@\h \[\033[1;34m\]\W\[\033[1;31m\]$(__git_ps1 &quot; (%s)&quot;)\[\033[1;35m\] -&gt; \[\033[0m\]&apos;</div></pre></td></tr></table></figure>
<p><strong> 重启终端即可. </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Clone-git-source-code&quot;&gt;&lt;a href=&quot;#Clone-git-source-code&quot; class=&quot;headerlink&quot; title=&quot;Clone git source code&quot;&gt;&lt;/a&gt;Clone git source code&lt;/
    
    </summary>
    
      <category term="System" scheme="http://blog.seay.me/categories/System/"/>
    
      <category term="Linux" scheme="http://blog.seay.me/categories/System/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.seay.me/tags/Ubuntu/"/>
    
      <category term="System" scheme="http://blog.seay.me/tags/System/"/>
    
      <category term="Linux" scheme="http://blog.seay.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.seay.me/tags/Shell/"/>
    
      <category term="Git" scheme="http://blog.seay.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Travis自动化部署Hexo</title>
    <link href="http://blog.seay.me/post/2016-03-26-Hexo-With-TravisCI.html"/>
    <id>http://blog.seay.me/post/2016-03-26-Hexo-With-TravisCI.html</id>
    <published>2016-03-26T12:55:29.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>本文介绍Hexo利用Travis CI自动化生成并发布,亲测可用.</strong></p>
</blockquote>
<h1 id="开通Travis-CI"><a href="#开通Travis-CI" class="headerlink" title="开通Travis CI"></a>开通Travis CI</h1><p>利用 GitHub账号登录 <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a></p>
<h1 id="项目开启Travis-CI"><a href="#项目开启Travis-CI" class="headerlink" title="项目开启Travis CI"></a>项目开启Travis CI</h1><p><img src="/static/images/hexo-with-travisci.jpg" alt="use travis-ci"></p>
<p>在项目的设置中开启<code>Build only if .travis.yml is present</code>这一项.</p>
<p><img src="/static/images/hexo-with-travisci-setting.jpg" alt="travis-ci setting"></p>
<h1 id="在github中生成Access-Token"><a href="#在github中生成Access-Token" class="headerlink" title="在github中生成Access Token"></a>在github中生成Access Token</h1><blockquote>
<p>这个用于操作repo,否则没有权限.</p>
</blockquote>
<p><img src="/static/images/20160328230629.jpg" alt="Profile Setting"></p>
<p><img src="/static/images/20160328230729.jpg" alt="Access Tokens"></p>
<h1 id="安装Travis"><a href="#安装Travis" class="headerlink" title="安装Travis"></a>安装Travis</h1><blockquote>
<p>注意:需要安装Ruby,并且需要安装rubygems插件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem isntall travis</div></pre></td></tr></table></figure>
<h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><p>在项目根目录创建<code>.travis.yml</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .travis.yml</div></pre></td></tr></table></figure></p>
<h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">branches:</div><div class="line">  only:</div><div class="line">  - master #源码分支名称</div><div class="line">before_install:</div><div class="line">- npm install -g hexo</div><div class="line">- npm install -g hexo-cli</div><div class="line">before_script:</div><div class="line">- git config --global user.name &apos;yourname&apos;</div><div class="line">- git config --global user.email &apos;youremail&apos;</div><div class="line">- sed -i&apos;&apos; &quot;s~git@github.com:&lt;yourname&gt;/&lt;projectname&gt;.git~https://$&#123;REPO_TOKEN&#125;:x-oauth-basic@github.com/&lt;yourname&gt;/&lt;projectname&gt;.git~&quot; _config.yml</div><div class="line">install:</div><div class="line">- npm install</div><div class="line">script:</div><div class="line">- hexo clean</div><div class="line">- hexo generate</div><div class="line">after_success:</div><div class="line">- hexo deploy</div></pre></td></tr></table></figure>
<h1 id="配置Travis"><a href="#配置Travis" class="headerlink" title="配置Travis"></a>配置Travis</h1><ul>
<li><p>登录travis</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis login --auto</div></pre></td></tr></table></figure>
</li>
<li><p>添加变量信息<br>在项目根目录下执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt &apos;REPO_TOKEN=&lt;TOKEN&gt;&apos; --add</div></pre></td></tr></table></figure>
</li>
</ul>
<p>之后会在<code>.travis.yml</code>文件中添加下面的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">env:</div><div class="line">  global:</div><div class="line">    secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n...</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里的<code>REPO_TOKEN</code>是变量名,在后面的配置文件中会用到.<br><code>TOKEN</code>是上面github生成的Token.</p>
</blockquote>
<h1 id="修改Hexo配置信息-config-yml"><a href="#修改Hexo配置信息-config-yml" class="headerlink" title="修改Hexo配置信息_config.yml"></a>修改Hexo配置信息_config.yml</h1><blockquote>
<p>如果之前配置过deploy信息可以略过.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:&lt;yourname&gt;/&lt;projectname&gt;.git</div><div class="line">  branch: &lt;branch&gt;</div></pre></td></tr></table></figure>
<h1 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h1><p>Push本地的代码至远程仓库，然后,在<a href="https://travis-ci.org看项目自动化执行" target="_blank" rel="external">https://travis-ci.org看项目自动化执行</a>.</p>
<p>原文地址:<a href="http://koyasu221b.com/2016/01/23/deploy-hexo-github-pages-by-travis/" target="_blank" rel="external">http://koyasu221b.com/2016/01/23/deploy-hexo-github-pages-by-travis/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文介绍Hexo利用Travis CI自动化生成并发布,亲测可用.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开通Travis-CI&quot;&gt;&lt;a href=&quot;#开通Travis-CI&quot; class=&quot;head
    
    </summary>
    
      <category term="前端" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/Hexo/"/>
    
    
      <category term="前端" scheme="http://blog.seay.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="http://blog.seay.me/tags/Hexo/"/>
    
      <category term="自动化" scheme="http://blog.seay.me/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Travis CI" scheme="http://blog.seay.me/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>Gulp.js基础入门教程</title>
    <link href="http://blog.seay.me/post/2016-02-04-Gulp-Get-Started.html"/>
    <id>http://blog.seay.me/post/2016-02-04-Gulp-Get-Started.html</id>
    <published>2016-02-04T15:25:29.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h1><blockquote>
<p>去 <a href="http://nodejs.org" target="_blank" rel="external">nodejs.org</a> 根据系统选择性按照教程安装Node。</p>
</blockquote>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ul>
<li><p>创建项目文件夹</p>
</li>
<li><p>进入项目文件夹</p>
</li>
<li><p>初始化项目</p>
<p> 使用npm命令:<code>npm init</code>,根据提示完成。</p>
</li>
</ul>
<a id="more"></a>
<h1 id="安装-Gulp"><a href="#安装-Gulp" class="headerlink" title="安装 Gulp"></a>安装 Gulp</h1><blockquote>
<p>进入项目文件夹,使用Node的包管理命令npm进行安装.</p>
</blockquote>
<ul>
<li>全局安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure>
<ul>
<li>项目依赖中安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>
<h1 id="创建Gulp配置文件"><a href="#创建Gulp配置文件" class="headerlink" title="创建Gulp配置文件"></a>创建Gulp配置文件</h1><ul>
<li>在项目根目录新建配置文件<code>gulpfile.js</code></li>
</ul>
<h1 id="设置配置信息"><a href="#设置配置信息" class="headerlink" title="设置配置信息"></a>设置配置信息</h1><blockquote>
<p>以常见的Gulp插件为例,如下：</p>
<ol>
<li>js代码校验(gulp-jshint)</li>
<li>合并js文件(gulp-concat)</li>
<li>压缩js代码(gulp-uglify)</li>
<li>sass的编译(gulp-sass)</li>
<li>less的编译(gulp-less)</li>
<li>压缩css(gulp-minify-css)</li>
<li>重命名(gulp-rename)</li>
</ol>
</blockquote>
<p>这些插件的安装命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-jshint gulp-concat gulp-uglify gulp-sass gulp-less gulp-minify-css gulp-rename --save-dev</div></pre></td></tr></table></figure>
<h2 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件:"></a>完整配置文件:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 引入组件</span></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 检查js脚本</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/js/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并,压缩js文件</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/js/*.js'</span>)</div><div class="line">        <span class="comment">//合并js文件</span></div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        <span class="comment">//给文件添加.min后缀</span></div><div class="line">        .pipe(rename(&#123; suffix: <span class="string">'.min'</span> &#125;))</div><div class="line">        <span class="comment">//压缩脚本文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 编译sass</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 编译less</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/less/*.less'</span>)</div><div class="line">        .pipe(less())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩css</span></div><div class="line">gulp.task(<span class="string">'style'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/css/*.css'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/style'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.css'</span>))</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/style'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 默认任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 监听文件变化</span></div><div class="line">    gulp.watch(<span class="string">'./src/js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'scripts'</span>);</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'./src/sass/*.scss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'sass'</span>);</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'./src/less/*.less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'less'</span>);</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'./src/css/*.css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'style'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-Node&quot;&gt;&lt;a href=&quot;#安装-Node&quot; class=&quot;headerlink&quot; title=&quot;安装 Node&quot;&gt;&lt;/a&gt;安装 Node&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;去 &lt;a href=&quot;http://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt; 根据系统选择性按照教程安装Node。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建项目文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入项目文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化项目&lt;/p&gt;
&lt;p&gt; 使用npm命令:&lt;code&gt;npm init&lt;/code&gt;,根据提示完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Gulp" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/Gulp/"/>
    
    
      <category term="前端" scheme="http://blog.seay.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Gulp" scheme="http://blog.seay.me/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>多说使用ua-parser-js显示浏览器和系统信息</title>
    <link href="http://blog.seay.me/post/2016-01-27_DuoShuo-UA-Parser-Display.html"/>
    <id>http://blog.seay.me/post/2016-01-27_DuoShuo-UA-Parser-Display.html</id>
    <published>2016-01-27T15:55:31.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  昨天博客接入了评论系统，使用的是国内的<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>。</p>
<p>  之前看到过有些利用该评论系统的有浏览器和系统信息的显示，感觉很不错。</p>
<p>  所以，也想有这样的效果。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>  多说如何显示浏览器和系统的信息?</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>  经过查找，利用<a href="https://github.com/faisalman/ua-parser-js" target="_blank" rel="external">UAParser.js</a>可以实现。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-添加样式"><a href="#1-添加样式" class="headerlink" title="1. 添加样式"></a>1. 添加样式</h2>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-class">.this_ua</span> &#123;<span class="attribute">background-color</span>: <span class="number">#ccc</span><span class="meta">!important</span>;<span class="attribute">border-radius</span>: <span class="number">4px</span>;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span><span class="meta">!important</span>;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span><span class="meta">!important</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#BBB</span><span class="meta">!important</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Windows</span>&#123;<span class="attribute">background-color</span>: <span class="number">#39b3d7</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#46b8da</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Linux</span> &#123;<span class="attribute">background-color</span>: <span class="number">#3A3A3A</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#1F1F1F</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Android</span> &#123;<span class="attribute">background-color</span>: <span class="number">#00C47D</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#01B171</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Chrome</span>&#123;<span class="attribute">background-color</span>: <span class="number">#5cb85c</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#4cae4c</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Firefox</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f0ad4e</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#eea236</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.IE</span>&#123;<span class="attribute">background-color</span>: <span class="number">#428bca</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#357ebd</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Opera</span>&#123;<span class="attribute">background-color</span>: <span class="number">#d9534f</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#d43f3a</span><span class="meta">!important</span>;&#125;</div></pre></td></tr></table></figure>
<p>  可以新建一个css文件，在页面中添加引用。</p>
<p>  如自定义显示颜色css请加.this_ua.platform.相关名称（注意大小写）。</p>
<h2 id="2-添加js代码"><a href="#2-添加js代码" class="headerlink" title="2. 添加js代码"></a>2. 添加js代码</h2><p>  这段代码最好放在多说js代码之后，可以放在多说js的下面。</p>
<p>  下面两段代码根据需要选择。</p>
<p>  正常加载使用这段代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> DUOSHUO !== <span class="string">'undefined'</span>)hookDUOSHUO_tp();</div><div class="line">  <span class="keyword">else</span> $(<span class="string">'[src="http://static.duoshuo.com/embed.js"]'</span>)[<span class="number">0</span>].onload=hookDUOSHUO_tp;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hookDUOSHUO_tp</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> _D_post=DUOSHUO.templates.post</div><div class="line">      DUOSHUO.templates.post=<span class="function"><span class="keyword">function</span> (<span class="params">e,t</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> rs=_D_post(e,t);</div><div class="line">          <span class="keyword">if</span>(e.agent&amp;&amp;<span class="regexp">/^Mozilla/</span>.test(e.agent))rs=rs.replace(<span class="regexp">/&lt;\/div&gt;&lt;p&gt;/</span>,show_ua(e.agent)+<span class="string">'&lt;/div&gt;&lt;p&gt;'</span>);</div><div class="line">          <span class="keyword">return</span> rs;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show_ua</span>(<span class="params">string</span>)</span>&#123;</div><div class="line">      $.ua.set(string);</div><div class="line">      <span class="keyword">var</span> sua=$.ua;</div><div class="line">      <span class="keyword">if</span>(sua.os.version==<span class="string">'x86_64'</span>)sua.os.version=<span class="string">'x64'</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">'&lt;span class="this_ua browser '</span>+sua.browser.name+<span class="string">'"&gt;'</span>+sua.browser.name+<span class="string">' | '</span>+sua.browser.version+<span class="string">'&lt;/span&gt;'</span>+<span class="string">'&lt;span class="this_ua platform '</span>+sua.os.name+<span class="string">'"&gt;'</span>+sua.os.name+<span class="string">' '</span>+sua.os.version+<span class="string">'&lt;/span&gt;'</span>;</div><div class="line">  &#125;</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>  无刷新加载的请使用下面代码:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> DUOSHUO !== <span class="string">'undefined'</span>)hookDUOSHUO_tp();</div><div class="line">  <span class="keyword">else</span> $(<span class="string">'[src="http://static.duoshuo.com/embed.js"]'</span>)[<span class="number">0</span>].onload=hookDUOSHUO_tp;</div><div class="line">  <span class="keyword">var</span> hookDUOSHUO_bl=<span class="literal">false</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hookDUOSHUO_tp</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(hookDUOSHUO_bl)<span class="keyword">return</span>;</div><div class="line">      <span class="keyword">else</span> hookDUOSHUO_bl=<span class="literal">true</span>;</div><div class="line">      <span class="keyword">var</span> _D_post=DUOSHUO.templates.post;</div><div class="line">      DUOSHUO.templates.post=<span class="function"><span class="keyword">function</span> (<span class="params">e,t</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> rs=_D_post(e,t);</div><div class="line">          <span class="keyword">if</span>(e.agent&amp;&amp;<span class="regexp">/^Mozilla/</span>.test(e.agent))rs=rs.replace(<span class="regexp">/&lt;\/div&gt;&lt;p&gt;/</span>,show_ua(e.agent)+<span class="string">'&lt;/div&gt;&lt;p&gt;'</span>);</div><div class="line">          <span class="keyword">return</span> rs;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show_ua</span>(<span class="params">string</span>)</span>&#123;</div><div class="line">      $.ua.set(string);</div><div class="line">      <span class="keyword">var</span> sua=$.ua;</div><div class="line">      <span class="keyword">if</span>(sua.os.version==<span class="string">'x86_64'</span>)sua.os.version=<span class="string">'x64'</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">'&lt;span class="this_ua browser '</span>+sua.browser.name+<span class="string">'"&gt;'</span>+sua.browser.name+<span class="string">' | '</span>+sua.browser.version+<span class="string">'&lt;/span&gt;'</span>+<span class="string">'&lt;span class="this_ua platform '</span>+sua.os.name+<span class="string">'"&gt;'</span>+sua.os.name+<span class="string">' '</span>+sua.os.version+<span class="string">'&lt;/span&gt;'</span>;</div><div class="line">  &#125;</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-引入ua-parser-js库"><a href="#3-引入ua-parser-js库" class="headerlink" title="3. 引入ua-parser.js库"></a>3. 引入ua-parser.js库</h2>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://faisalman.github.io/ua-parser-js/src/ua-parser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  可以将库文件下载到本地添加到主题中。</p>
<p>  要先引入jquery库文件。</p>
<p>  引入的<code>ua-parser.js</code>库文件必须在多说<code>embed.js</code>之后。</p>
<p>  推荐加载多说js代码中：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">"&lt;%= theme.duoshuo_shortname %&gt;"</span>&#125;;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">    ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">    ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">    ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">    ds.src = <span class="string">'http://faisalman.github.io/ua-parser-js/src/ua-parser.js'</span>;</div><div class="line">    ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">  &#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span> &gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>  <img src="/static/images/20160128002958.png" alt="效果图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  昨天博客接入了评论系统，使用的是国内的&lt;a href=&quot;http://duoshuo.com/&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="前端" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="多说" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/%E5%A4%9A%E8%AF%B4/"/>
    
    
      <category term="前端" scheme="http://blog.seay.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://blog.seay.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="多说" scheme="http://blog.seay.me/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题实现多级分类显示</title>
    <link href="http://blog.seay.me/post/2016-01-24_Hexo-Theme-MutilLevel-Category-Display.html"/>
    <id>http://blog.seay.me/post/2016-01-24_Hexo-Theme-MutilLevel-Category-Display.html</id>
    <published>2016-01-24T13:46:07.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近在搞一个博客，是托管在<a href="https://github.com" target="_blank" rel="external">github</a>和<a href="https://gitcafe.com" target="_blank" rel="external">gitcafe</a>上的，利用<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>生成的。<br>  之后，发现一个问题，显示的分类都是一级的。而我想要的是：能显示<code>多级分类</code>,层次分明`的那样。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote>
<p>基本主题自带的分类显示都是一级的，如何显示多级?</p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>  所以，研究了一下，找到了理想的方法，方法如下:</p>
<ol>
<li><p>利用系统的<a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">list_categories([categories], [options])</a>辅助函数生成分类列表;</p>
</li>
<li><p>利用css实现样式.</p>
</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>  说明：我使用的是<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">jacman</a>主题，以这个主题为例说明。</p>
<ol>
<li><p>在主题文件夹下找到<code>layout/_widget/category.ejs</code>文件,内容如下:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.categories.length</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"categorieslist"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"asidetitle"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">categories</span>') %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> <span class="attr">site.categories.sort</span>('<span class="attr">name</span>')<span class="attr">.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.posts.length</span>)&#123; %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.name %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.name</span> %&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.posts.length</span> %&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改内容,利用上面提到的<code>list_categories([categories], [options])</code>辅助函数:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.categories.length</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"category-block"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"asidetitle"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">categories</span>') %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(<span class="attr">site.categories</span>) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改样式文件</p>
</li>
</ol>
<ul>
<li><p>在主题文件夹下找到<code>source/css/_partial/aside.styl</code>文件,其他的也可能是<code>source/css/_partial/sidebar.styl</code>。反正，能在页面显示即可。</p>
</li>
<li><p>添加新的样式，我的如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//categories</div><div class="line">.category-block&gt;ul&gt;li</div><div class="line">  border-bottom 1px solid #ccc</div><div class="line">.category-block li</div><div class="line">  margin-bottom 8px</div><div class="line">.category-list</div><div class="line">  @media mini</div><div class="line">    width 45%</div><div class="line">    float left</div><div class="line">    margin 0 5% 0 0</div><div class="line">  @media tablet</div><div class="line">    width 100%</div><div class="line">    float none</div><div class="line">    margin .5em 0 0</div><div class="line">  .categoriy-list-item</div><div class="line">    padding .5em 5%</div><div class="line">  .category-list-count</div><div class="line">    top -.5em</div><div class="line">    padding-left .3em</div><div class="line">    font-size 75%</div><div class="line">    line-height 0</div><div class="line">    position relative</div><div class="line">    vertical-align baseline</div><div class="line">  ul, ol, dl</div><div class="line">    list-style none</div><div class="line">  ul, ol, dl</div><div class="line">    background-color #f9f9fa</div><div class="line">    margin-left 20px</div><div class="line">    li</div><div class="line">      border-bottom 1px dashed #ccc</div><div class="line">  .category-list-child</div><div class="line">    border-top 1px dashed #ccc</div><div class="line">    margin-bottom 8px</div></pre></td></tr></table></figure>
<p>想实现不同的样式，自己可以修改。</p>
</li>
</ul>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>  <img src="/static/images/20160124214658.png" alt="效果图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  最近在搞一个博客，是托管在&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="前端" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="http://blog.seay.me/categories/%E5%89%8D%E7%AB%AF/Hexo/"/>
    
    
      <category term="前端" scheme="http://blog.seay.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="http://blog.seay.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MS SQL Server 数据库分离--SQL语句</title>
    <link href="http://blog.seay.me/post/2016-01-21_MSSQL-DB-Detach.html"/>
    <id>http://blog.seay.me/post/2016-01-21_MSSQL-DB-Detach.html</id>
    <published>2016-01-21T09:31:30.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在在清理数据库，是<code>MS SQL Server</code>,其中用到分离数据库文件。在这过程中，出现了一个小小的问题：误将数据库日志文件删除了，然后数据就打不开了，除了脱机，其他操作都报错。</p>
<hr>
<h1 id="数据库分离"><a href="#数据库分离" class="headerlink" title="数据库分离"></a>数据库分离</h1><h2 id="常规方法"><a href="#常规方法" class="headerlink" title="常规方法"></a>常规方法</h2><p>此方法是常规惯用的方式，多步骤。</p>
<p>如图所示：</p>
<p><img src="http://segmentfault.com/img/bVsoMZ" alt="图一"></p>
<p><img src="http://segmentfault.com/img/bVsoM0" alt="图二"></p>
<hr>
<h2 id="粗暴方法"><a href="#粗暴方法" class="headerlink" title="粗暴方法"></a>粗暴方法</h2><p>此方法简单粗暴，非常实用，一条<code>SQL</code>语句就搞定了。</p>
<p>SQL语句实现： <code>EXEC sp_detach_db [DatabaseName]</code></p>
<p>示例：<code>EXEC sp_detach_db OA</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天在在清理数据库，是&lt;code&gt;MS SQL Server&lt;/code&gt;,其中用到分离数据库文件。在这过程中，出现了一个小小的问题：误将数
    
    </summary>
    
      <category term="Database" scheme="http://blog.seay.me/categories/Database/"/>
    
      <category term="MSSQL" scheme="http://blog.seay.me/categories/Database/MSSQL/"/>
    
    
      <category term="Database" scheme="http://blog.seay.me/tags/Database/"/>
    
      <category term="数据库" scheme="http://blog.seay.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MSSQL" scheme="http://blog.seay.me/tags/MSSQL/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 5 已死 隆重介绍 ASP.NET Core 1.0 和 .NET Core 1.0</title>
    <link href="http://blog.seay.me/post/2016-01-20_ASP-NET-5-Is-Dead-Introducing-ASP-NET-Core-1-0-And-NET-Core-1-0.html"/>
    <id>http://blog.seay.me/post/2016-01-20_ASP-NET-5-Is-Dead-Introducing-ASP-NET-Core-1-0-And-NET-Core-1-0.html</id>
    <published>2016-01-20T15:43:30.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>  晚上回来就看到有博文说<code>ASP.NET 5</code>已死,其来源出自于<a href="http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx" target="_blank" rel="external">Scott Hanselman</a>的博客，下面是原文。</p>
<h1 id="个人观点："><a href="#个人观点：" class="headerlink" title="个人观点："></a>个人观点：</h1><blockquote>
<ol>
<li><p>命名：由于现在<code>asp.net</code>已开源，并支持跨平台,这是一种新的实现，而且和<code>asp.net 4.6</code>是并行关系，不是在4.6的基础上升级，所以不应该沿用之前的命名。</p>
</li>
<li><p>已死：由于<code>asp.net 5</code>是一种新的实现，不是原来版本的升级，已重命名，所以说，<code>asp.net 5</code>算是死了。不过，还是有些人习惯叫<code>asp.net 5</code>。</p>
</li>
</ol>
</blockquote>
<h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><strong> Naming is hard. </strong></p>
<blockquote>
<p>There are only two hard things in Computer Science: cache invalidation and naming things. - Phil Karlton</p>
</blockquote>
<p>  It’s very easy to armchair quarterback and say that “they should have named it Foo and it would be easy” but very often there’s many players involved in naming things. ASP.NET is a good ‘brand’ that’s been around for 15 years or so. ASP.NET 4.6 is a supported and released product that you can get and use now from <a href="http://get.asp.net" target="_blank" rel="external">http://get.asp.net</a>.</p>
<p>  However, naming the new, completely written from scratch ASP.NET framework “ASP.NET 5” was a bad idea for a one major reason: 5 &gt; 4.6 makes it seem like ASP.NET 5 is bigger, better, and replaces ASP.NET 4.6. Not so.</p>
<p>  So we’re changing the name and picking a better version number.</p>
<p><strong> REINTRODUCING ASP.NET CORE 1.0 AND .NET CORE 1.0 </strong></p>
<ul>
<li><p>ASP.NET 5 is now ASP.NET Core 1.0.</p>
</li>
<li><p>.NET Core 5 is now .NET Core 1.0.</p>
</li>
<li><p>Entity Framework 7 is now Entity Framework Core 1.0 or EF Core 1.0 colloquially.</p>
<p>Why 1.0? Because these are new. The whole .NET Core concept is new. The <a href="http://www.hanselman.com/blog/ExploringTheNewNETDotnetCommandLineInterfaceCLI.aspx" target="_blank" rel="external">.NET Core 1.0 CLI</a> is very new. Not only that, but .NET Core isn’t as complete as the full .NET Framework 4.6. We’re still exploring server-side graphics libraries. We’re still exploring gaps between ASP.NET 4.6 and ASP.NET Core 1.0.</p>
<p><img src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Reintroducing-ASP.NET-Core-1.0-and-.NE.0_B840/image_0e978596-bd85-42ed-8d27-c16e119bca5d.png" alt=""></p>
</li>
</ul>
<p><strong> WHICH TO CHOOSE? </strong></p>
<p>  To be clear, ASP.NET 4.6 is the more mature platform. It’s battle-tested and released and available today. ASP.NET Core 1.0 is a 1.0 release that includes Web API and MVC but doesn’t yet have SignalR or Web Pages. It doesn’t yet support VB or F#. It will have these subsystems some day but not today.</p>
<p>  We don’t want anyone to think that ASP.NET Core 1.0 is the finish line. It’s a new beginning and a fork in the road, but ASP.NET 4.6 continues on, released and fully supported. There’s lots of great stuff coming, stay tuned!</p>
<hr>
<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p><strong> 起名真难 </strong></p>
<blockquote>
<p>计算机科学中只有两件难事：缓存失效和命名。——Phil Karlton</p>
</blockquote>
<p>  “他们就该给它起个名字叫Foo，多简单的事” 纸上谈兵说说很容易，但是起名字这件事经常牵扯到很多因素。ASP.NET 作为一个好“牌子”已经有15年了。ASP.NET 4.6是一个受支持的已发布产品，你可以在 <a href="https://get.asp.net" target="_blank" rel="external">https://get.asp.net</a> 获取。</p>
<p>  然而，把一个全新的、完全重写的ASP.NET框架命名为 “ASP.NET 5” 不是一个好主意，一个主要原因就是：5 &gt; 4.6 让人觉得 ASP.NET 5 更大、更好，是取代ASP.NET 4.6的。并不是。</p>
<p>  所以我们重新命名并选了一个更好的版本号。</p>
<p><strong> 隆重介绍 ASP.NET Core 1.0 和 .NET Core 1.0 </strong></p>
<ul>
<li>ASP.NET 5 现在叫做 ASP.NET Core 1.0</li>
<li>.NET Core 现在叫做 .NET Core 1.0</li>
<li><p>Entity Framework 7 现在叫做 Entity Framework Core 1.0 或者简称 EF Core 1.0</p>
<p>为什么选1.0？因为它们是全新的。整个.NET Core概念就是全新的。.NET Core CLI 是非常新的东西。（译注：.Net Core Command Line Interface ，将取代DNX）</p>
<p>不仅如此，.NET Core还不像.NET Framework 4.6那样完整。我们仍在完善服务端图形库(server-side grahpics libraries)，我们仍在填补ASP.NET Core 1.0和ASP.NET 4.6之间的缺口。</p>
<p><img src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Reintroducing-ASP.NET-Core-1.0-and-.NE.0_B840/image_0e978596-bd85-42ed-8d27-c16e119bca5d.png" alt=""></p>
</li>
</ul>
<p><strong> 如何选择？ </strong></p>
<p>  明确一下，ASP.NET 4.6是更成熟的平台。是经过实战（battle-tested）的目前已发布的可以用版本。</p>
<p>  ASP.NET Core 1.0则是1.0版本，包括了Web API和MVC，但不包括SinglR和Web Pages。目前还不支持VB和F#。这些都会在将来实现，但目前还没有。</p>
<p>  我们不想让人认为ASP.NET Core 1.0是个终点线，它是一个新的起点和新的分支。</p>
<p>  ASP.NET 4.6将继续前行，发布并全面受到支持。别走开，更多精彩内容即将呈现。</p>
<p>FROM:<a href="http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx" target="_blank" rel="external">Scott Hanselman Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h1&gt;&lt;p&gt;  晚上回来就看到有博文说&lt;code&gt;ASP.NET 5&lt;/code&gt;已死,其来源出自于&lt;a href=&quot;http://www.hansel
    
    </summary>
    
      <category term=".NET" scheme="http://blog.seay.me/categories/NET/"/>
    
      <category term="ASP.NET" scheme="http://blog.seay.me/categories/NET/ASP-NET/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.seay.me/tags/ASP-NET/"/>
    
      <category term="ASP.NET 5" scheme="http://blog.seay.me/tags/ASP-NET-5/"/>
    
      <category term="ASP.NET Core" scheme="http://blog.seay.me/tags/ASP-NET-Core/"/>
    
      <category term="NET Core" scheme="http://blog.seay.me/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>转载--MySQL开发规范(二)</title>
    <link href="http://blog.seay.me/post/2016-01-20_MySQL-Development-Specification-02.html"/>
    <id>http://blog.seay.me/post/2016-01-20_MySQL-Development-Specification-02.html</id>
    <published>2016-01-20T03:03:20.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<p><strong> MYSQL数据库命名及设计规范 </strong></p>
<h1 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1.设计原则"></a>1.设计原则</h1><h2 id="1-标准化和规范化"><a href="#1-标准化和规范化" class="headerlink" title="1) 标准化和规范化"></a>1) 标准化和规范化</h2><pre><code>数据的标准化有助于消除数据库中的数据冗余。标准化有好几种形式，但Third Normal Form（3NF）通常被认为在性能、扩展性和数据完整性方面达到了最好平衡。简单来说，遵守3NF 标准的数据库的表设计原则是：“One Fact in One Place”即某个表只包括其本身基本的属性，当不是它们本身所具有的属性时需进行分解。表之间的关系通过外键相连接。它具有以下特点：有一组表专门存放通过键连接起来的关联数据。

举例：某个存放客户及其有关定单的3NF 数据库就可能有两个表：Customer和Order。Order表不包含定单关联客户的任何信息，但表内会存放一个键值，该键指向Customer表里包含该客户信息的那一行。

事实上，为了效率的缘故，对表不进行标准化有时也是必要的。
</code></pre><h2 id="2-数据驱动"><a href="#2-数据驱动" class="headerlink" title="2) 数据驱动"></a>2) 数据驱动</h2><pre><code>采用数据驱动而非硬编码的方式，许多策略变更和维护都会方便得多，大大增强系统的灵活性和扩展性。

举例，假如用户界面要访问外部数据源（文件、XML 文档、其他数据库等），不妨把相应的连接和路径信息存储在用户界面支持表里。还有，如果用户界面执行工作流之类的任务（发送邮件、打印信笺、修改记录状态等），那么产生工作流的数据也可以存放在数据库里。角色权限管理也可以通过数据驱动来完成。事实上，如果过程是数据驱动的，你就可以把相当大的责任推给用户，由用户来维护自己的工作流过程。
</code></pre><h2 id="3-考虑各种变化"><a href="#3-考虑各种变化" class="headerlink" title="3) 考虑各种变化"></a>3) 考虑各种变化</h2><pre><code>在设计数据库的时候考虑到哪些数据字段将来可能会发生变更。

举例，姓氏就是如此（注意是西方人的姓氏，比如女性结婚后从夫姓等）。所以，在建立系统存储客户信息时，在单独的一个数据表里存储姓氏字段，而且还附加起始日和终止日等字段，这样就可以跟踪这一数据条目的变化。
</code></pre><h1 id="2-数据库涉及字符规范"><a href="#2-数据库涉及字符规范" class="headerlink" title="2.数据库涉及字符规范"></a>2.数据库涉及字符规范</h1><p>  采用26个英文字母(区分大小写)和0-9这十个自然数,加上下划线’_’组成,共63个字符.不能出现其他字符(注释除外).</p>
<p>  注意事项:</p>
<pre><code>1) 以上命名都不得超过30个字符的系统限制.变量名的长度限制为29(不包括标识字符@).

2) 数据对象、变量的命名都采用英文字符,禁止使用中文命名.绝对不要在对象名的字符之间留空格.

3) 小心保留词,要保证你的字段名没有和保留词、数据库系统或者常用访问方法冲突

4) 保持字段名和类型的一致性,在命名字段并为其指定数据类型的时候一定要保证一致性.假如数据类型在一个表里是整数,那在另一个表里可就别变成字符型了.
</code></pre><h1 id="3-数据库命名规范"><a href="#3-数据库命名规范" class="headerlink" title="3.数据库命名规范"></a>3.数据库命名规范</h1><p>  数据库,数据表一律使用前缀</p>
<p>  正式数据库名使用小写英文以及下划线组成,尽量说明是那个应用或者系统在使用的.比如:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">web_19floor_net</div><div class="line"></div><div class="line">web_car</div></pre></td></tr></table></figure>
<p>  备份数据库名使用正式库名加上备份时间组成,如:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">web_19floor_net_20070403</div><div class="line"></div><div class="line">web_car_20070403</div></pre></td></tr></table></figure>
<h1 id="4-数据库表命名规范"><a href="#4-数据库表命名规范" class="headerlink" title="4.数据库表命名规范"></a>4.数据库表命名规范</h1><p>  数据表名使用小写英文以及下划线组成,尽量说明是那个应用或者系统在使用的.</p>
<p>  相关应用的数据表使用同一前缀,如论坛的表使用cdb<em>前缀,博客的数据表使用supe</em>前缀,前缀名称一般不超过5字</p>
<p>  比如:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">web_user</div><div class="line"></div><div class="line">web_group</div><div class="line"></div><div class="line">supe_userspace</div></pre></td></tr></table></figure>
<p>  备份数据表名使用正式表名加上备份时间组成,如:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">web_user_20070403</div><div class="line"></div><div class="line">web_group_20070403</div><div class="line"></div><div class="line">supe_userspace_20070403</div></pre></td></tr></table></figure>
<h1 id="5-字段命名规范"><a href="#5-字段命名规范" class="headerlink" title="5.字段命名规范"></a>5.字段命名规范</h1><p>  字段名称使用单词组合完成,首字母小写,后面单词的首字母大写,最好是带表名前缀.</p>
<p>  如<code>web_user</code>表的字段:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">userId</div><div class="line"></div><div class="line">userName</div><div class="line"></div><div class="line">userPassword</div></pre></td></tr></table></figure>
<p>  表与表之间的相关联字段要用统一名称</p>
<p>  如<code>web_user</code>表里面的<code>userId</code>和<code>web_group</code>表里面的<code>userId</code>相对应</p>
<h1 id="6-字段类型规范"><a href="#6-字段类型规范" class="headerlink" title="6.字段类型规范"></a>6.字段类型规范</h1><pre><code>规则:用尽量少的存储空间来存数一个字段的数据.

比如能用int的就不用char或者varchar

能用tinyint的就不用int

能用varchar(20)的就不用varchar(255)

时间戳字段尽量用int型，如created:表示从&apos;1970-01-01 08:00:00&apos;开始的int秒数，采用英文单词的过去式；gmtCreated:表示datetime类型的时间，即形如&apos;1980-01-01 00:00:00&apos;的时间串，Java中对应的类型为Timestamp
</code></pre><h1 id="7-数据库设计文档规范"><a href="#7-数据库设计文档规范" class="headerlink" title="7.数据库设计文档规范"></a>7.数据库设计文档规范</h1><p>  所有数据库设计要写成文档,文档以模块化形式表达.大致格式如下：</p>
<pre><code>&apos;-------------------------------------------
&apos;    表名：    web_user
&apos;    作者：    Aeolus(傻鱼)
&apos;    日期：    2007-04-11
&apos;    版本：    1.0
&apos;    描述：    保存用户资料
&apos;    具体内容：
&apos;    UserID  int,自动增量  用户代码
&apos;    UserName char(12)  用户名字
&apos;    ......
&apos;--------------------------------------------
</code></pre><h1 id="8-索引使用原则："><a href="#8-索引使用原则：" class="headerlink" title="8.索引使用原则："></a>8.索引使用原则：</h1><pre><code>1) 逻辑主键使用唯一的成组索引,对系统键(作为存储过程)采用唯一的非成组索引,对任何外键列采用非成组索引.考虑数据库的空间有多大,表如何进行访问,还有这些访问是否主要用作读写.

2) 大多数数据库都索引自动创建的主键字段,但是可别忘了索引外键,它们也是经常使用的键,比如运行查询显示主表和所有关联表的某条记录就用得上.

3) 不要索引blob/text等字段,不要索引大型字段(有很多字符),这样作会让索引占用太多的存储空间.

4) 不要索引常用的小型表

  不要为小型数据表设置任何键,假如它们经常有插入和删除操作就更别这样作了.对这些插入和删除操作的索引维护可能比扫描表空间消耗更多的时间.
</code></pre><h1 id="9-sql语句规范"><a href="#9-sql语句规范" class="headerlink" title="9.sql语句规范"></a>9.sql语句规范</h1><p>  所有sql关键词全部大写,比如SELECT,UPDATE,FROM,ORDER,BY等,所有的表名和库名都要用``包含<br>  如:<br>    <code>SELECT COUNT(*) FROM `cdb_members` WHERE `userName` = &#39;aeolus&#39;;</code></p>
<h1 id="10-其他设计技巧"><a href="#10-其他设计技巧" class="headerlink" title="10.其他设计技巧"></a>10.其他设计技巧</h1><p>  1) 避免使用触发器</p>
<pre><code>触发器的功能通常可以用其他方式实现.在调试程序时触发器可能成为干扰.假如你确实需要采用触发器,你最好集中对它文档化.
</code></pre><p>  2) 使用常用英语(或者其他任何语言)而不要使用编码或者拼音首字母缩写</p>
<pre><code>在创建下拉菜单、列表、报表时最好按照英语名排序.假如需要编码或者拼音首字母缩写,可以在旁边附上用户知道的英语.
</code></pre><p>  3) 保存常用信息</p>
<pre><code>让一个表专门存放一般数据库信息非常有用.在这个表里存放数据库当前版本、最近检查/修复(对Access)、关联设计文档的名称、客户等信息.这样可以实现一种简单机制跟踪数据库,当客户抱怨他们的数据库没有达到希望的要求而与你联系时,这样做对非客户机/服务器环境特别有用.
</code></pre><p>  4) 包含版本机制</p>
<pre><code>在数据库中引入版本控制机制来确定使用中的数据库的版本.时间一长,用户的需求总是会改变的.最终可能会要求修改数据库结构.把版本信息直接存放到数据库中更为方便.
</code></pre><p>  5) 编制文档</p>
<pre><code>对所有的快捷方式、命名规范、限制和函数都要编制文档.

采用给表、列、触发器等加注释的数据库工具.对开发、支持和跟踪修改非常有用.

对数据库文档化,或者在数据库自身的内部或者单独建立文档.这样,当过了一年多时间后再回过头来做第2 个版本,犯错的机会将大大减少.
</code></pre><p>  6) 测试、测试、反复测试</p>
<pre><code>建立或者修订数据库之后,必须用用户新输入的数据测试数据字段.最重要的是,让用户进行测试并且同用户一道保证选择的数据类型满足商业要求.测试需要在把新数据库投入实际服务之前完成.
</code></pre><p>  7) 检查设计</p>
<pre><code>在开发期间检查数据库设计的常用技术是通过其所支持的应用程序原型检查数据库.换句话说,针对每一种最终表达数据的原型应用,保证你检查了数据模型并且查看如何取出数据.
</code></pre><blockquote>
<p>来自：<a href="http://www.phpboke.com/mysql-fuifan.html" target="_blank" rel="external">http://www.phpboke.com/mysql-fuifan.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; MYSQL数据库命名及设计规范 &lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-设计原则&quot;&gt;&lt;a href=&quot;#1-设计原则&quot; class=&quot;headerlink&quot; title=&quot;1.设计原则&quot;&gt;&lt;/a&gt;1.设计原则&lt;/h1&gt;&lt;h2 id=&quot;1-标准化和规
    
    </summary>
    
      <category term="Database" scheme="http://blog.seay.me/categories/Database/"/>
    
      <category term="MySQL" scheme="http://blog.seay.me/categories/Database/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.seay.me/tags/MySQL/"/>
    
      <category term="Database" scheme="http://blog.seay.me/tags/Database/"/>
    
      <category term="数据库" scheme="http://blog.seay.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>转载--MySQL开发规范(一)</title>
    <link href="http://blog.seay.me/post/2016-01-20_MySQL-Development-Specification-01.html"/>
    <id>http://blog.seay.me/post/2016-01-20_MySQL-Development-Specification-01.html</id>
    <published>2016-01-20T02:16:20.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-表设计"><a href="#一、-表设计" class="headerlink" title="一、 表设计"></a>一、 表设计</h1><p>  库名、表名、字段名必须使用小写字母，“_”分割。</p>
<p>  库名、表名、字段名必须不超过12个字符。</p>
<p>  库名、表名、字段名见名知意,建议使用名词而不是动词。</p>
<p>  建议使用InnoDB存储引擎。</p>
<p>  存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。</p>
<p>  建议使用UNSIGNED存储非负数值。</p>
<p>  建议使用INT UNSIGNED存储IPV4。</p>
<p>  整形定义中不添加长度，比如使用INT，而不是INT(4)。</p>
<p>  使用短数据类型，比如取值范围为0-80时，使用TINYINT UNSIGNED。</p>
<p>  不建议使用ENUM类型，使用TINYINT来代替。</p>
<p>  尽可能不使用TEXT、BLOB类型。</p>
<p>  VARCHAR(N)，N表示的是字符数不是字节数，比如VARCHAR(255)，可以最大可存储255个汉字，需要根据实际的宽度来选择N。</p>
<p>  VARCHAR(N)，N尽可能小，因为MySQL一个表中所有的VARCHAR字段最大长度是65535个字节，进行排序和创建临时表一类的内存操作时，会使用N的长度申请内存。</p>
<p>  表字符集选择UTF8。</p>
<p>  使用VARBINARY存储变长字符串。</p>
<p>  存储年使用YEAR类型。</p>
<p>  存储日期使用DATE类型。</p>
<p>  存储时间（精确到秒）建议使用TIMESTAMP类型，因为TIMESTAMP使用4字节，DATETIME使用8个字节。</p>
<p>  建议字段定义为NOT NULL。</p>
<p>  将过大字段拆分到其他表中。</p>
<p>  禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。</p>
<p>  表结构变更需要通知DBA审核。</p>
<h1 id="二、-索引"><a href="#二、-索引" class="headerlink" title="二、 索引"></a>二、 索引</h1><p>  非唯一索引必须按照“idx<em>字段名称</em>字段名称[_字段名]”进行命名。</p>
<p>  唯一索引必须按照“uniq<em>字段名称</em>字段名称[_字段名]”进行命名。</p>
<p>  索引名称必须使用小写。</p>
<p>  索引中的字段数建议不超过5个。</p>
<p>  单张表的索引数量控制在5个以内。</p>
<p>  唯一键由3个以下字段组成，并且字段都是整形时，使用唯一键作为主键。</p>
<p>  没有唯一键或者唯一键不符合5中的条件时，使用自增（或者通过发号器获取）id作为主键。</p>
<p>  唯一键不和主键重复。</p>
<p>  索引字段的顺序需要考虑字段值去重之后的个数，个数多的放在前面。</p>
<p>  ORDER BY，GROUP BY，DISTINCT的字段需要添加在索引的后面。</p>
<p>  使用EXPLAIN判断SQL语句是否合理使用索引，尽量避免extra列出现：Using File Sort，Using Temporary。<br>  UPDATE、DELETE语句需要根据WHERE条件添加索引。</p>
<p>  不建议使用%前缀模糊查询，例如LIKE “%weibo”。</p>
<p>  对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</p>
<p>  合理创建联合索引（避免冗余），(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)。</p>
<p>  合理利用覆盖索引。</p>
<p>  SQL变更需要确认索引是否需要变更并通知DBA。</p>
<h1 id="三、-SQL语句"><a href="#三、-SQL语句" class="headerlink" title="三、 SQL语句"></a>三、 SQL语句</h1><p>  使用prepared statement，可以提供性能并且避免SQL注入。</p>
<p>  SQL语句中IN包含的值不应过多。</p>
<p>  UPDATE、DELETE语句不使用LIMIT。</p>
<p>  WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</p>
<p>  SELECT语句只获取需要的字段。</p>
<p>  SELECT、INSERT语句必须显式的指明字段名称，不使用SELECT *，不使用INSERT INTO table()。</p>
<p>  使 用SELECT column_name1, column_name2 FROM table WHERE [condition]而不是SELECT column_name1 FROM table WHERE [condition]和SELECT column_name2 FROM table WHERE [condition]。</p>
<p>  WHERE条件中的非等值条件（IN、BETWEEN、&lt;、&lt;=、&gt;、&gt;=）会导致后面的条件使用不了索引。</p>
<p>  避免在SQL语句进行数学运算或者函数运算，容易将业务逻辑和DB耦合在一起。</p>
<p>  INSERT语句使用batch提交（INSERT INTO table VALUES(),(),()……），values的个数不应过多。</p>
<p>  避免使用存储过程、触发器、函数等，容易将业务逻辑和DB耦合在一起，并且MySQL的存储过程、触发器、函数中存在一定的bug。</p>
<p>  避免使用JOIN。</p>
<p>  使用合理的SQL语句减少与数据库的交互次数。</p>
<p>  不使用ORDER BY RAND()，使用其他方法替换。</p>
<p>  建议使用合理的分页方式以提高分页的效率。</p>
<p>  统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。</p>
<p>  禁止在从库上执行后台管理和统计类型功能的QUERY。</p>
<h1 id="四、-散表"><a href="#四、-散表" class="headerlink" title="四、 散表"></a>四、 散表</h1><p>  每张表数据量建议控制在5000w以下。</p>
<p>  可以结合使用hash、range、lookup table进行散表。</p>
<p>  散表如果使用md5（或者类似的hash算法）进行散表，表名后缀使用16进制，比如user_ff。</p>
<p>  推荐使用CRC32求余（或者类似的算术算法）进行散表，表名后缀使用数字，数字必须从0开始并等宽，比如散100张表，后缀从00-99。</p>
<p>  使用时间散表，表名后缀必须使用特定格式，比如按日散表user_20110209、按月散表user_201102。</p>
<h1 id="五、-其他"><a href="#五、-其他" class="headerlink" title="五、 其他"></a>五、 其他</h1><p>  批量导入、导出数据需要DBA进行审查，并在执行过程中观察服务。</p>
<p>  批量更新数据，如update,delete 操作，需要DBA进行审查，并在执行过程中观察服务。</p>
<p>  产品出现非数据库平台运维导致的问题和故障时，如前端被抓站，请及时通知DBA，便于维护服务稳定。</p>
<p>  业务部门程序出现bug等影响数据库服务的问题,请及时通知DBA，便于维护服务稳定。</p>
<p>  业务部门推广活动，请提前通知DBA进行服务和访问评估。</p>
<p>  如果出现业务部门人为误操作导致数据丢失，需要恢复数据，请在第一时间通知DBA，并提供准确时间，误操作语句等重要线索。</p>
<hr>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="1-1-库名、表名、字段名必须使用小写字母，“-”分割。"><a href="#1-1-库名、表名、字段名必须使用小写字母，“-”分割。" class="headerlink" title="1-1.库名、表名、字段名必须使用小写字母，“_”分割。"></a>1-1.库名、表名、字段名必须使用小写字母，“_”分割。</h2><p>  a) MySQL有配置参数lower_case_table_names，不可动态更改，linux系统默认为0，即库表名以实际情况存储，大小写敏感。如果是1，以小写存储，大小写不敏感。如果是2，以实际情况存储，但以小写比较。</p>
<p>  b) 如果大小写混合用，可能存在abc,Abc,ABC等多个表共存，容易导致混乱。</p>
<p>  c) 字段名显示区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。</p>
<p>  d) 为了统一规范， 库名、表名、字段名使用小写字母。</p>
<h2 id="1-2-库名、表名、字段名必须不超过12个字符。"><a href="#1-2-库名、表名、字段名必须不超过12个字符。" class="headerlink" title="1-2.库名、表名、字段名必须不超过12个字符。"></a>1-2.库名、表名、字段名必须不超过12个字符。</h2><p>  库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，必须不超过12字符。</p>
<h2 id="1-3-库名、表名、字段名见名知意-建议使用名词而不是动词。"><a href="#1-3-库名、表名、字段名见名知意-建议使用名词而不是动词。" class="headerlink" title="1-3.库名、表名、字段名见名知意,建议使用名词而不是动词。"></a>1-3.库名、表名、字段名见名知意,建议使用名词而不是动词。</h2><p>  a) 用户评论可用表名usercomment或者comment。</p>
<p>  b) 库表是一种客观存在的事物，一种对象，所以建议使用名词。</p>
<h2 id="1-4-建议使用InnoDB存储引擎。"><a href="#1-4-建议使用InnoDB存储引擎。" class="headerlink" title="1-4.建议使用InnoDB存储引擎。"></a>1-4.建议使用InnoDB存储引擎。</h2><p>  a) 5.5以后的默认引擘，支持事务，行级锁，更好的恢复性，高并发下性能更好，对多核，大内存，ssd等硬件支持更好。</p>
<p>  b) 具体比较可见附件的官方白皮书。</p>
<h2 id="1-5-存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。"><a href="#1-5-存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。" class="headerlink" title="1-5.存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。"></a>1-5.存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。</h2><p>  a) mysql中的数值类型（不包括整型）：</p>
<pre><code>IEEE754浮点数： float  （单精度） ， double  或 real  （双精度）

定点数： decimal 或 numeric

单精度浮点数的有效数字二进制是24位，按十进制来说，是8位；

双精度浮点数的有效数字二进制是53位，按十进制来说，是16 位

一个实数的有效数字超过8位，用单精度浮点数来表示的话，就会产生误差！同样，如果一个实数的有效数字超过16位，用双精度浮点数来表示，也会产生误差
</code></pre><p>  b) IEEE754标准的计算机浮点数，在内部是用二进制表示的，但在将一个十进制数转换为二进制浮点数时，也会造成误差，原因是不是所有的数都能转换成有限长度的二进制数。<br>    即一个二进制可以准确转换成十进制，但一个带小数的十进制不一定能够准确地用二进制来表示。</p>
<p>  <strong> 实例： </strong><br>    <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> t;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t(<span class="keyword">value</span> <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">131072.67</span>),(<span class="number">131072.68</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span>  <span class="keyword">value</span>  <span class="keyword">from</span> t;</div><div class="line"></div><div class="line">+<span class="comment">-----------+</span></div><div class="line"></div><div class="line">| value     |</div><div class="line"></div><div class="line">+<span class="comment">-----------+</span></div><div class="line"></div><div class="line">| 131072.67 |</div><div class="line"></div><div class="line">| 131072.69 |</div><div class="line"></div><div class="line">+<span class="comment">-----------+</span></div></pre></td></tr></table></figure></p>
<h2 id="1-6-建议使用UNSIGNED存储非负数值。"><a href="#1-6-建议使用UNSIGNED存储非负数值。" class="headerlink" title="1-6.建议使用UNSIGNED存储非负数值。"></a>1-6.建议使用UNSIGNED存储非负数值。</h2><p>  同样的字节数，存储的数值范围更大。如tinyint 有符号为 -128-127，无符号为0-255</p>
<h2 id="1-7-如何使用INT-UNSIGNED存储ip？"><a href="#1-7-如何使用INT-UNSIGNED存储ip？" class="headerlink" title="1-7. 如何使用INT UNSIGNED存储ip？"></a>1-7. 如何使用INT UNSIGNED存储ip？</h2><p>  使用INT UNSIGNED而不是char(15)来存储ipv4地址，通过MySQL函数inet_ntoa和inet_aton来进行转化。Ipv6地址目前没有转化函数，需要使用DECIMAL或者两个bigINT来存储。</p>
<p>  例如：</p>
<pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_ATON</span>(<span class="string">'209.207.224.40'</span>);</div><div class="line"></div><div class="line">3520061480</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_NTOA</span>(<span class="number">3520061480</span>);</div><div class="line"></div><div class="line">209.207.224.40</div></pre></td></tr></table></figure>
</code></pre><h2 id="1-8-INT-M-，M值代表什么含义？"><a href="#1-8-INT-M-，M值代表什么含义？" class="headerlink" title="1-8. INT[M]，M值代表什么含义？"></a>1-8. INT[M]，M值代表什么含义？</h2><p>  注意数值类型括号后面的数字只是表示宽度而跟存储范围没有关系，比如INT(3)默认显示3位，空格补齐，超出时正常显示，python、java客户端等不具备这个功能。</p>
<h2 id="1-10-不建议使用ENUM、SET类型，使用TINYINT来代替。"><a href="#1-10-不建议使用ENUM、SET类型，使用TINYINT来代替。" class="headerlink" title="1-10.不建议使用ENUM、SET类型，使用TINYINT来代替。"></a>1-10.不建议使用ENUM、SET类型，使用TINYINT来代替。</h2><p>  a) ENUM，有三个问题：添加新的值要做DDL，默认值问题(将一个非法值插入ENUM(也就是说，允许的值列之外的字符串)，将插入空字符串以作为特殊错误值)，索引值问题（插入数字实际是插入索引对应的值）</p>
<p>  <strong> 实例： </strong></p>
<pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> t;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t(sex enum(<span class="string">'0'</span>,<span class="string">'1'</span>));</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="string">'3'</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t;</div><div class="line"></div><div class="line">+<span class="comment">------+</span></div><div class="line"></div><div class="line">| sex  |</div><div class="line"></div><div class="line">+<span class="comment">------+</span></div><div class="line"></div><div class="line">| 0    |</div><div class="line"></div><div class="line">|      |</div><div class="line"></div><div class="line">+<span class="comment">------+</span></div><div class="line"></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure>
</code></pre><h2 id="1-11-尽可能不使用TEXT、BLOB类型。"><a href="#1-11-尽可能不使用TEXT、BLOB类型。" class="headerlink" title="1-11.尽可能不使用TEXT、BLOB类型。"></a>1-11.尽可能不使用TEXT、BLOB类型。</h2><p>  a) 索引排序问题，只能使用max_sort_length的长度或者手工指定ORDER BY SUBSTRING(column, length)的长度来排序</p>
<p>  b) Memory引擘不支持text,blog类型，会在磁盘上生成临时表</p>
<p>  c) 可能浪费更多的空间</p>
<p>  d) 可能无法使用 <code>adaptive hash index</code></p>
<p>  e) 导致使用where没有索引的语句变慢</p>
<h2 id="1-13-VARCHAR中会产生额外存储吗？"><a href="#1-13-VARCHAR中会产生额外存储吗？" class="headerlink" title="1-13. VARCHAR中会产生额外存储吗？"></a>1-13. VARCHAR中会产生额外存储吗？</h2><p>  <code>VARCHAR(M)</code>，如果M<256时会使用一个字节来存储长度，如果m>=256则使用两个字节来存储长度。</256时会使用一个字节来存储长度，如果m></p>
<h2 id="1-14-表字符集选择UTF8。"><a href="#1-14-表字符集选择UTF8。" class="headerlink" title="1-14.表字符集选择UTF8。"></a>1-14.表字符集选择UTF8。</h2><p>  a) 使用utf8字符集，如果是汉字，占3个字节，但ASCII码字符还是1个字节。</p>
<p>  b) 统一，不会有转换产生乱码风险</p>
<p>  c) 其他地区的用户（美国、印度、台湾）无需安装简体中文支持，就能正常看您的文字，并且不会出现乱码</p>
<p>  d) ISO-8859-1编码(latin1)使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃。即把其他任何编码的字节流当作ISO-8859-1编码看待都没有问题，保存的是原封不动的字节流。</p>
<h2 id="1-15-使用VARBINARY存储变长字符串。"><a href="#1-15-使用VARBINARY存储变长字符串。" class="headerlink" title="1-15.使用VARBINARY存储变长字符串。"></a>1-15.使用VARBINARY存储变长字符串。</h2><p>  二进制字节流，不存在编码问题</p>
<h2 id="1-18-为什么建议使用TIMESTAMP来存储时间而不是DATETIME？"><a href="#1-18-为什么建议使用TIMESTAMP来存储时间而不是DATETIME？" class="headerlink" title="1-18. 为什么建议使用TIMESTAMP来存储时间而不是DATETIME？"></a>1-18. 为什么建议使用TIMESTAMP来存储时间而不是DATETIME？</h2><p>  DATETIME和TIMESTAMP都是精确到秒，优先选择TIMESTAMP，因为TIMESTAMP只有4个字节，而DATETIME8个字节。同时TIMESTAMP具有自动赋值以及自动更新的特性。</p>
<p>  如何使用TIMESTAMP的自动赋值属性？</p>
<pre><code>a)  将当前时间作为ts的默认值：ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP。

b)  当行更新时，更新ts的值：ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP。

c)  可以将1和2结合起来：ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP。
</code></pre><h2 id="1-19-建议字段定义为NOT-NULL。"><a href="#1-19-建议字段定义为NOT-NULL。" class="headerlink" title="1-19.建议字段定义为NOT NULL。"></a>1-19.建议字段定义为NOT NULL。</h2><p>  a）如果null字段被索引，需要额外的1字节</p>
<p>  b）使索引，索引统计，值的比较变得更复杂</p>
<p>  c）可用0，’’代替</p>
<p>  d）如果是索引字段，一定要定义为not null</p>
<h2 id="1-21-禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。"><a href="#1-21-禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。" class="headerlink" title="1-21.禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。"></a>1-21.禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。</h2><p>  采用分布式文件系统更高效</p>
<h2 id="2-为什么MySQL的性能依赖于索引？"><a href="#2-为什么MySQL的性能依赖于索引？" class="headerlink" title="2. 为什么MySQL的性能依赖于索引？"></a>2. 为什么MySQL的性能依赖于索引？</h2><p>  MySQL的查询速度依赖良好的索引设计，因此索引对于高性能至关重要。合理的索引会加快查询速度（包括UPDATE和DELETE的速度，MySQL会将包含该行的page加载到内存中，然后进行UPDATE或者DELETE操作），不合理的索引会降低速度。</p>
<p>  MySQL索引查找类似于新华字典的拼音和部首查找，当拼音和部首索引不存在时，只能通过一页一页的翻页来查找。当MySQL查询不能使用索引时，MySQL会进行全表扫描，会消耗大量的IO。</p>
<h2 id="2-5-为什么一张表中不能存在过多的索引？"><a href="#2-5-为什么一张表中不能存在过多的索引？" class="headerlink" title="2-5. 为什么一张表中不能存在过多的索引？"></a>2-5. 为什么一张表中不能存在过多的索引？</h2><p>  InnoDB的secondary index使用b+tree来存储，因此在UPDATE、DELETE、INSERT的时候需要对b+tree进行调整，过多的索引会减慢更新的速度。</p>
<h2 id="2-11-EXPLAIN语句"><a href="#2-11-EXPLAIN语句" class="headerlink" title="2-11. EXPLAIN语句"></a>2-11. EXPLAIN语句</h2><p>  EXPLAIN 语句（在MySQL客户端中执行）可以获得MySQL如何执行SELECT语句的信息。通过对SELECT语句执行EXPLAIN，可以知晓MySQL执 行该SELECT语句时是否使用了索引、全表扫描、临时表、排序等信息。尽量避免MySQL进行全表扫描、使用临时表、排序等。详见官方文档。</p>
<h2 id="2-13-不建议使用-前缀模糊查询，例如LIKE-“-weibo”。"><a href="#2-13-不建议使用-前缀模糊查询，例如LIKE-“-weibo”。" class="headerlink" title="2-13.不建议使用%前缀模糊查询，例如LIKE “%weibo”。"></a>2-13.不建议使用%前缀模糊查询，例如LIKE “%weibo”。</h2><p>  会导致全表扫描</p>
<h2 id="2-14-如何对长度大于50的VARCHAR字段建立索引？"><a href="#2-14-如何对长度大于50的VARCHAR字段建立索引？" class="headerlink" title="2-14. 如何对长度大于50的VARCHAR字段建立索引？"></a>2-14. 如何对长度大于50的VARCHAR字段建立索引？</h2><p>  下面的表增加一列url_crc32，然后对url_crc32建立索引，减少索引字段的长度，提高效率。</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">url</span>(</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line"><span class="keyword">url</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">url_crc32 <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line"><span class="keyword">index</span> idx_url(url_crc32)</div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="2-16-什么是覆盖索引？"><a href="#2-16-什么是覆盖索引？" class="headerlink" title="2-16. 什么是覆盖索引？"></a>2-16. 什么是覆盖索引？</h2><p>  InnoDB 存储引擎中，secondary index（非主键索引）中没有直接存储行地址，存储主键值。如果用户需要查询secondary index中所不包含的数据列时，需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。</p>
<p>  覆盖索引的概念就是查询可以通过在一个索引中完成，覆盖索引效率会比较高，主键查询是天然的覆盖索引。</p>
<p>  合理的创建索引以及合理的使用查询语句，当使用到覆盖索引时可以获得性能提升。</p>
<p>  比如SELECT email,uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid,email)，以获得性能提升。</p>
<h2 id="3-3-UPDATE、DELETE语句不使用LIMIT。"><a href="#3-3-UPDATE、DELETE语句不使用LIMIT。" class="headerlink" title="3-3.UPDATE、DELETE语句不使用LIMIT。"></a>3-3.UPDATE、DELETE语句不使用LIMIT。</h2><p>  a) 可能导致主从数据不一致</p>
<p>  b) 会记录到错误日志，导致日志占用大量空间</p>
<h2 id="3-4-为什么需要避免MySQL进行隐式类型转化？"><a href="#3-4-为什么需要避免MySQL进行隐式类型转化？" class="headerlink" title="3-4. 为什么需要避免MySQL进行隐式类型转化？"></a>3-4. 为什么需要避免MySQL进行隐式类型转化？</h2><p>  因为MySQL进行隐式类型转化之后，可能会将索引字段类型转化成=号右边值的类型，导致使用不到索引，原因和避免在索引字段中使用函数是类似的。</p>
<h2 id="3-6-为什么不建议使用SELECT"><a href="#3-6-为什么不建议使用SELECT" class="headerlink" title="3-6. 为什么不建议使用SELECT *?"></a>3-6. 为什么不建议使用SELECT *?</h2><p>  增加很多不必要的消耗（cpu、io、内存、网络带宽）；增加了使用覆盖索引的可能性；当表结构发生改变时，前段也需要更新。</p>
<h2 id="3-13-如何减少与数据库的交互次数？"><a href="#3-13-如何减少与数据库的交互次数？" class="headerlink" title="3-13. 如何减少与数据库的交互次数？"></a>3-13. 如何减少与数据库的交互次数？</h2><p>  使用下面的语句来减少和db的交互次数：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> ... <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span></div><div class="line"></div><div class="line"><span class="keyword">REPLACE</span></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">values</span>(),()如何结合使用多个纬度进行散表散库？</div></pre></td></tr></table></figure>
<p>  例如微博message，先按照crc32(message_id)将message散到16个库中，然后针对每个库中的表，一天生成一张新表。</p>
<h2 id="3-14-为什么不能使用ORDER-BY-rand-？"><a href="#3-14-为什么不能使用ORDER-BY-rand-？" class="headerlink" title="3-14. 为什么不能使用ORDER BY rand()？"></a>3-14. 为什么不能使用ORDER BY rand()？</h2><p>  因为ORDER BY rand()会将数据从磁盘中读取，进行排序，会消耗大量的IO和CPU，可以在程序中获取一个rand值，然后通过在从数据库中获取对应的值。</p>
<h2 id="3-15-MySQL中如何进行分页？"><a href="#3-15-MySQL中如何进行分页？" class="headerlink" title="3-15. MySQL中如何进行分页？"></a>3-15. MySQL中如何进行分页？</h2><p>  假如有类似下面分页语句：</p>
<p> <code>SELECT * FROM table ORDER BY TIME DESC LIMIT 10000,10;</code></p>
<p> 这种分页方式会导致大量的io，因为MySQL使用的是提前读取策略。</p>
<p> 推荐分页方式：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">TIME</span>&lt;last_TIME <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">TIME</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10.</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">inner</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">TIME</span> <span class="keyword">LIMIT</span> <span class="number">10000</span>,<span class="number">10</span>) <span class="keyword">as</span> t <span class="keyword">USING</span>(<span class="keyword">id</span>)</div></pre></td></tr></table></figure>
<h2 id="3-17-为什么避免使用复杂的SQL？"><a href="#3-17-为什么避免使用复杂的SQL？" class="headerlink" title="3-17.为什么避免使用复杂的SQL？"></a>3-17.为什么避免使用复杂的SQL？</h2><p>  拒绝使用复杂的SQL，将大的SQL拆分成多条简单SQL分步执行。原因：简单的SQL容易使用到MySQL的query cache；减少锁表时间特别是MyISAM；可以使用多核cpu。</p>
<h2 id="2-InnoDB存储引擎为什么避免使用COUNT"><a href="#2-InnoDB存储引擎为什么避免使用COUNT" class="headerlink" title="2. InnoDB存储引擎为什么避免使用COUNT(*)?"></a>2. InnoDB存储引擎为什么避免使用COUNT(*)?</h2><p>  InnoDB表避免使用COUNT(*)操作，计数统计实时要求较强可以使用memcache或者redis，非实时统计可以使用单独统计表，定时更新。</p>
<blockquote>
<p>来自：<a href="http://www.phpboke.com/mysql-fuifan.html" target="_blank" rel="external">http://www.phpboke.com/mysql-fuifan.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-表设计&quot;&gt;&lt;a href=&quot;#一、-表设计&quot; class=&quot;headerlink&quot; title=&quot;一、 表设计&quot;&gt;&lt;/a&gt;一、 表设计&lt;/h1&gt;&lt;p&gt;  库名、表名、字段名必须使用小写字母，“_”分割。&lt;/p&gt;
&lt;p&gt;  库名、表名、字段名必须不超过12个字
    
    </summary>
    
      <category term="Database" scheme="http://blog.seay.me/categories/Database/"/>
    
      <category term="MySQL" scheme="http://blog.seay.me/categories/Database/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.seay.me/tags/MySQL/"/>
    
      <category term="Database" scheme="http://blog.seay.me/tags/Database/"/>
    
      <category term="数据库" scheme="http://blog.seay.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu(Shell)命令行下连接到无线网络-使用wpa-cli命令</title>
    <link href="http://blog.seay.me/post/2016-01-17_Ubuntu-Shell-WiFi-Setting.html"/>
    <id>http://blog.seay.me/post/2016-01-17_Ubuntu-Shell-WiFi-Setting.html</id>
    <published>2016-01-17T11:16:20.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="情景说明"><a href="#情景说明" class="headerlink" title="情景说明"></a>情景说明</h1><blockquote>
<p>自己买了个<code>Raspberry Pi 2</code>的板子，没有显示器，想利用无线连接通过<code>SSH</code>连接。无奈之下才上网查了下，发现可以利用<code>shell</code>命令设置无线连接，于是，就有了以下的内容。</p>
</blockquote>
<h1 id="动手实施"><a href="#动手实施" class="headerlink" title="动手实施"></a>动手实施</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>在<code>shell</code>中输入<code>wpa_cli</code>命令，进入交互，然后输入以下信息(注：#为注释)</p>
</li>
<li><p>设置相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">add_network #执行后会返回一个数字（一般是0）</div><div class="line">#network_id为无线网的ID，自己取名</div><div class="line">set_network [network_id] ssid &apos;无线名称&apos; #根据你的网络环境填写</div><div class="line">set_network [network_id] psk &apos;无线密码&apos; #无线密码</div><div class="line">enable_network [network_id] #启用网络，成功后会返回 CONNECT TO XXXX的信息</div></pre></td></tr></table></figure>
</li>
<li><p>退出交互模式</p>
<p>输入<code>q</code>退出交互模式。</p>
</li>
<li><p>连接网络</p>
<p>使用 <code>dhclient wlan0</code> 命令获取网络地址。</p>
</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~$ ifconfig #查看无线网卡名称，假定为nxthswrw234</div><div class="line">root@ubuntu:~$ wpa_cli</div><div class="line">add_network</div><div class="line">set_network NETID ssid &apos;MyWiFi&apos;</div><div class="line">set_network NETID psk &apos;12345678&apos;</div><div class="line">enable_network NETID</div><div class="line">q</div><div class="line">root@ubuntu:~$ dhclient nxthswrw234 #nxthswrw234为无线网卡名称</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;情景说明&quot;&gt;&lt;a href=&quot;#情景说明&quot; class=&quot;headerlink&quot; title=&quot;情景说明&quot;&gt;&lt;/a&gt;情景说明&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;自己买了个&lt;code&gt;Raspberry Pi 2&lt;/code&gt;的板子，没有显示器，想利用无线连接
    
    </summary>
    
      <category term="System" scheme="http://blog.seay.me/categories/System/"/>
    
      <category term="Linux" scheme="http://blog.seay.me/categories/System/Linux/"/>
    
      <category term="Ubuntu" scheme="http://blog.seay.me/categories/System/Linux/Ubuntu/"/>
    
    
      <category term="Raspberry Pi 2" scheme="http://blog.seay.me/tags/Raspberry-Pi-2/"/>
    
      <category term="树莓派" scheme="http://blog.seay.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Ubuntu" scheme="http://blog.seay.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>树莓派(Raspberry Pi2)Windows IoT入门</title>
    <link href="http://blog.seay.me/post/2016-01-14_Windows-IoT-Get-Started-For-Raspberry-Pi2.html"/>
    <id>http://blog.seay.me/post/2016-01-14_Windows-IoT-Get-Started-For-Raspberry-Pi2.html</id>
    <published>2016-01-14T15:32:55.000Z</published>
    <updated>2016-08-13T05:50:25.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置电脑"><a href="#设置电脑" class="headerlink" title="设置电脑"></a><a href="http://ms-iot.github.io/content/zh-CN/win10/SetupPCRPI.htm" target="_blank" rel="external">设置电脑</a></h2><h3 id="在电脑上设置-Visual-Studio-2015"><a href="#在电脑上设置-Visual-Studio-2015" class="headerlink" title="在电脑上设置 Visual Studio 2015"></a>在电脑上设置 Visual Studio 2015</h3><p>若要设置 Windows 10 IoT 核心版开发电脑，首先需要安装以下内容：</p>
<ol>
<li><p><strong>请确保运行的是 Windows 10（版本 10240）的公共版本或更高版本</strong>。可从<a href="http://www.microsoft.com/zh-CN/software-download/windows10" target="_blank" rel="external">此处</a>升级。如果已经运行 Windows 10，可通过单击“开始”按钮、键入“winver”并点击 Enter，查找当前版本号。</p>
</li>
<li><p>在<a href="http://go.microsoft.com/fwlink/?LinkID=534599" target="_blank" rel="external">此处</a><strong>安装</strong> Visual Studio Community 2015。可从<a href="https://www.visualstudio.com/vs-2015-product-editions" target="_blank" rel="external">此处</a>下载 Visual Studio <code>Professional 2015</code> 和 Visual Studio <code>Enterprise</code> 2015。</p>
<p> <strong>注意：</strong> 如果选择安装不同版本的 VS 2015，请确保执行“自定义”安装，并依次选中“通用 Windows 应用开发工具”-&gt;“工具和 Windows SDK”复选框。</p>
</li>
<li><p>通过依次选择“帮助”&gt;“关于 Microsoft Visual Studio”<strong>验证</strong> Visual Studio <strong>安装</strong>。“Visual Studio”的所需版本是 <code>14.0.23107.0 D14Rel</code>。“用于通用 Windows 应用的 Visual Studio 工具”的所需版本是 <code>14.0.23121.00 D14OOB</code>。</p>
</li>
<li><p>确保已按照<a href="https://msdn.microsoft.com/library/windows/apps/xaml/dn706236.aspx" target="_blank" rel="external">这些说明</a>启用了<strong>开发人员模式</strong>。</p>
</li>
</ol>
<h2 id="设置你的设备"><a href="#设置你的设备" class="headerlink" title="设置你的设备"></a><a href="http://ms-iot.github.io/content/zh-CN/win10/SetupRPI.htm" target="_blank" rel="external">设置你的设备</a></h2><h3 id="需要具备的条件"><a href="#需要具备的条件" class="headerlink" title="需要具备的条件"></a>需要具备的条件</h3><ol>
<li><p><strong>运行 Windows 10 的电脑</strong>（在上一步中已准备就绪）</p>
</li>
<li><p><strong>Raspberry Pi 2</strong></p>
</li>
<li><p><strong>5V 微型 USB 电源</strong> - 使用至少 1.0A 电流。如果计划使用多个高耗电 USB 外围设备，请改用电流较高的电源 (&gt;2.0A)。</p>
</li>
<li><p><strong>8GB 微型 SD 卡</strong> - 类 10 或更高。（我们建议使用<a href="http://www.amazon.com/gp/product/B00IVPU786" target="_blank" rel="external">这个</a>或<a href="http://www.amazon.com/SanDisk-Ultra-Micro-SDHC-16GB/dp/9966573445" target="_blank" rel="external">这个</a>）</p>
</li>
<li><p><strong>HDMI 电缆和监视器</strong></p>
</li>
<li><p><strong>以太网电缆</strong></p>
</li>
<li><p><strong>微型 SD 卡读卡器</strong>（因为大多数内部 SD 卡读卡器均会出现问题，所以我们建议使用外部 USB 卡读卡器，例如<a href="http://www.amazon.com/dp/B009D79VH4" target="_blank" rel="external">这个</a>或<a href="http://www.amazon.com/dp/B0096FB5CW" target="_blank" rel="external">这个</a>）</p>
</li>
</ol>
<h3 id="安装-Windows-10-IoT-核心版工具"><a href="#安装-Windows-10-IoT-核心版工具" class="headerlink" title="安装 Windows 10 IoT 核心版工具"></a>安装 Windows 10 IoT 核心版工具</h3><ol>
<li><p>从 Microsoft 下载中心<a href="http://go.microsoft.com/fwlink/?LinkId=616847" target="_blank" rel="external">下载</a>用于 Raspberry Pi 2 的 ISO。</p>
</li>
<li><p>将 ISO 保存到本地文件夹</p>
<p> <img src="http://ms-iot.github.io/content/images/SetupRPI/Iso.PNG" alt=""></p>
</li>
<li><p>双击 ISO（IoT 核心版 RPi.iso）。它将自动将其本身作为虚拟驱动器进行装载，以便你可以访问内容。</p>
<p> <img src="http://ms-iot.github.io/content/images/SetupRPI/MSI.PNG" alt=""></p>
</li>
<li><p>安装 Windows_10_IoT_Core_RPi2.msi。安装完成后，flash.ffu 将位于 C:\Program Files (x86)\Microsoft IoT\FFU\RaspberryPi2</p>
<p> <img src="http://ms-iot.github.io/content/images/SetupRPI/rpiffu.PNG" alt=""></p>
</li>
<li><p>完成后将弹出虚拟 CD</p>
</li>
</ol>
<h3 id="将-Windows-10-IoT-Core-Insider-Preview-映像放置在-SD-卡上"><a href="#将-Windows-10-IoT-Core-Insider-Preview-映像放置在-SD-卡上" class="headerlink" title="将 Windows 10 IoT Core Insider Preview 映像放置在 SD 卡上"></a>将 Windows 10 IoT Core Insider Preview 映像放置在 SD 卡上</h3><ol>
<li><p>将微型 SD 卡插入 SD 卡读卡器。</p>
</li>
<li><p>使用 IoTCoreImageHelper.exe 切换 SD 卡。从“开始”菜单搜索“WindowsIoT”，并选择快捷方式“WindowsIoTImageHelper”</p>
<p> <img src="http://ms-iot.github.io/content/images/ImagerHelperSearch.PNG" alt=""></p>
</li>
<li><p>该工具将按照显示方式枚举设备。选择希望切换的 SD 卡，然后提供 FFU 的位置并切换映像。<br> <img src="http://ms-iot.github.io/content/images/SetupRPI/ImageHelper.PNG" alt=""></p>
</li>
<li><p>单击任务栏中的“安全删除硬件”图标，然后选择你的 USB SD 读卡器以将其从系统中安全删除。如果未正确执行此操作，可能导致映像损坏。</p>
<p><strong>注意</strong>： 如果希望在使用完 Windows 10 IoT 核心版后将其从 SD 卡中删除，请参阅标题为<strong>如何从 SD 卡中删除 Windows 10 IoT 核心版？</strong>的<a href="http://ms-iot.github.io/content/zh-CN/Faqs.htm" target="_blank" rel="external">常见问题</a>部分。</p>
<p><strong>注意</strong>： IoTCoreImageHelper.exe 是推荐用来切换 SD 卡的工具。但是，说明可用于直接使用 <a href="http://ms-iot.github.io/content/zh-CN/win10/samples/DISM.htm" target="_blank" rel="external">DISM 命令</a>行工具</p>
</li>
</ol>
<h3 id="连接电路板"><a href="#连接电路板" class="headerlink" title="连接电路板"></a>连接电路板</h3><ol>
<li><p>插入已准备的<strong>微型 SD 卡</strong>（插槽在如下所示的电路板的另一侧）。</p>
</li>
<li><p><strong>将网络电缆</strong>从本地网络连接到电路板上的以太网端口。请确保开发电脑在同一网络上。</p>
<p><strong>注意</strong>： 如果没有本地有线网络，请参阅<a href="http://ms-iot.github.io/content/zh-CN/win10/ConnectToDevice.htm" target="_blank" rel="external">此处</a>获取其他连接选项。</p>
</li>
<li><p><strong>将 HDMI 监视器连接到</strong>电路板上的 HDMI 端口。</p>
</li>
<li><p><strong>将电源连接到</strong>开发板上的微型 USB 端口。</p>
<p> <img src="http://ms-iot.github.io/content/images/rpi2.png" alt=""></p>
</li>
</ol>
<h3 id="启动-Windows-10-IoT-核心版"><a href="#启动-Windows-10-IoT-核心版" class="headerlink" title="启动 Windows 10 IoT 核心版"></a>启动 Windows 10 IoT 核心版</h3><ol>
<li><p>连接电源后，Windows 10 IoT 核心版将自动启动。这可能需要几分钟时间。</p>
</li>
<li><p>启动设备后，DefaultApp 将启动并显示 RPi2 的 IP 地址。</p>
<p> <img src="http://ms-iot.github.io/content/images/DefaultAppRpi2.png" alt=""></p>
</li>
<li><p>遵循<a href="http://ms-iot.github.io/content/zh-CN/win10/samples/PowerShell.htm" target="_blank" rel="external">此处的 PowerShell 文档</a>，使用 PowerShell 连接到正在运行的设备。也可按照<a href="http://ms-iot.github.io/content/zh-CN/win10/samples/SSH.htm" target="_blank" rel="external">此处</a>的说明使用 SSH 连接到设备。</p>
</li>
<li><p><strong>强烈推荐</strong>更新管理员帐户的默认密码。若要执行此操作，请在 PowerShell 连接中发出以下命令：</p>
<p>使用强密码替换 <code>[new password]</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net user Administrator [new password]</div></pre></td></tr></table></figure>
<p>此操作完成后，将需要使用 psSession 和新凭据重新建立当前会话。</p>
</li>
</ol>
<h3 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h3><ul>
<li><a href="http://ms-iot.github.io/content/zh-CN/win10/SupportedInterfaces.htm" target="_blank" rel="external">受支持的外围接口和设备</a></li>
</ul>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a><a href="http://ms-iot.github.io/content/zh-CN/win10/samples/Blinky.htm" target="_blank" rel="external">开发</a></h2><h3 id="Blinky-示例"><a href="#Blinky-示例" class="headerlink" title="Blinky 示例"></a>Blinky 示例</h3><p>我们将创建一个简单的 LED 闪烁应用并将 LED 连接到你的 Windows 10 IoT Core 设备。</p>
<p>这是一个有外设的示例。若要更好地了解什么是有外设的模式以及如何将你的设备配置为有外设，请按照<a href="http://ms-iot.github.io/content/zh-CN/win10/HeadlessMode.htm" target="_blank" rel="external">此处</a>的说明操作。</p>
<p>另外，还请注意 GPIO API 仅在 Windows 10 IoT Core 上可用，因此该示例无法在你的桌面上运行。</p>
<p>在 Visual Studio 中加载项目</p>
<p>你可以通过在<a href="https://github.com/ms-iot/samples/archive/develop.zip" target="_blank" rel="external">此处</a>下载所有示例的 zip 并导航到 <code>samples-develop\Blinky</code>，查找此示例的源代码。示例代码可采用 C++ 或 C# 提供，但此处的文档仅详细介绍了 C# 变体。在磁盘上创建文件夹的副本，然后从 Visual Studio 中打开项目。</p>
<h4 id="将-LED-连接到你的-Windows-IoT-设备"><a href="#将-LED-连接到你的-Windows-IoT-设备" class="headerlink" title="将 LED 连接到你的 Windows IoT 设备"></a>将 LED 连接到你的 Windows IoT 设备</h4><p>你将会需要一些组件：</p>
<ul>
<li><p>一个 LED（你喜欢的任意一种颜色）</p>
</li>
<li><p>一个 220 Ω 电阻器</p>
</li>
<li><p>一块试验板和几根连接线</p>
<p>  <img src="http://ms-iot.github.io/content/images/Blinky/components.png" alt=""></p>
</li>
</ul>
<h4 id="适用于-Raspberry-Pi-2-RPi2"><a href="#适用于-Raspberry-Pi-2-RPi2" class="headerlink" title="适用于 Raspberry Pi 2 (RPi2)"></a>适用于 Raspberry Pi 2 (RPi2)</h4><p>我们要将 LED 的一端连接到 RPi2 上的 GPIO 5（JP3 扩展头上的引脚 29），将另一端连接到电阻器，并将电阻器连接到 RPi2 上的 3.3 伏电源。请注意 LED 的正负极非常重要。请确保将较短的腿 (-) 连接到 GPIO 5 并将较长的腿 (+) 连接到电阻器，否则它不会点亮。</p>
<p>下面是 RPi2 的引出线：</p>
<p><img src="http://ms-iot.github.io/content/images/PinMappings/RP2_Pinout.png" alt=""></p>
<p><em>使用 <a href="http://fritzing.org/" target="_blank" rel="external">Fritzing</a> 制作的图像</em></p>
<p>下面是使用电路组装的试验板可能样子的一个示例：</p>
<p><img src="http://ms-iot.github.io/content/images/Blinky/breadboard_assembled_rpi2.png" alt=""></p>
<p><em>使用 <a href="http://fritzing.org/" target="_blank" rel="external">Fritzing</a> 制作的图像</em></p>
<h4 id="适用于-MinnowBoard-Max-MBM"><a href="#适用于-MinnowBoard-Max-MBM" class="headerlink" title="适用于 MinnowBoard Max (MBM)"></a>适用于 MinnowBoard Max (MBM)</h4><p>我们要将 LED 的一端连接到 MBM 上的 GPIO 5（JP1 扩展头上的引脚 18），将另一端连接到电阻器，并将电阻器连接到 MBM 上的 3.3 伏电源。请注意 LED 的正负极非常重要。请确保将较短的腿 (-) 连接到 GPIO 5 并将较长的腿 (+) 连接到电阻器，否则它不会点亮。</p>
<p>以下是 MBM 上的 JP1 连接器：</p>
<p><img src="http://ms-iot.github.io/content/images/PinMappings/MBM_Pinout.png" alt=""></p>
<p><em>使用 <a href="http://fritzing.org/" target="_blank" rel="external">Fritzing</a> 制作的图像</em></p>
<p>下面是使用电路组装的试验板可能样子的一个示例：</p>
<p><img src="http://ms-iot.github.io/content/images/Blinky/breadboard_assembled.png" alt=""></p>
<p><em>使用 <a href="http://fritzing.org/" target="_blank" rel="external">Fritzing</a> 制作的图像</em></p>
<h4 id="部署你的应用"><a href="#部署你的应用" class="headerlink" title="部署你的应用"></a>部署你的应用</h4><ol>
<li><p>应用程序在 Visual Studio 中打开后，在工具栏下拉列表中设置体系结构。如果针对 MinnowBoard Max 进行生成，请选择 <code>x86</code>。如果针对 Raspberry Pi 2 进行生成，请选择 <code>ARM</code>。</p>
</li>
<li><p>接下来，在 Visual Studio 工具栏中，单击<code>Local Machine</code>下拉列表并选择 <code>Remote Machine</code></p>
<p> <img src="http://ms-iot.github.io/content/images/AppDeployment/cs-remote-machine-debugging.png" alt=""></p>
</li>
<li><p>此时，Visual Studio 将显示“远程连接”对话框。如果以前使用过 <a href="http://ms-iot.github.io/content/zh-CN/win10/samples/PowerShell.htm" target="_blank" rel="external">PowerShell</a> 设置设备的唯一名称，可在此处输入该名称（在此示例中，我们使用的是 my-device）。否则，使用 Windows IoT 核心版设备的 IP 地址。输入设备名称/IP 后，选择 <code>None</code> 进行 Windows 身份验证，然后单击“选择”。</p>
<p> <img src="http://ms-iot.github.io/content/images/AppDeployment/cs-remote-connections.PNG" alt=""></p>
</li>
<li><p>可通过导航到项目属性（在解决方案资源管理器中选择“属性”）并在左侧选择 Debug 选项卡来验证或修改这些值：</p>
<p> <img src="http://ms-iot.github.io/content/images/AppDeployment/cs-debug-project-properties.PNG" alt="项目属性调试选项卡"></p>
</li>
</ol>
<p>完成所有设置后，你应可以在 Visual Studio 中按 F5。Blinky 应用将会部署并在 Windows IoT 设备上启动，此时你应会看到 LED 与屏幕上的模拟图像同步闪烁。</p>
<p><img src="http://ms-iot.github.io/content/images/Blinky/blinky-screenshot.png" alt=""></p>
<p>恭喜你！ 你已控制了 Windows IoT 设备上的一个 GPIO 引脚！</p>
<h4 id="我们来看看代码"><a href="#我们来看看代码" class="headerlink" title="我们来看看代码"></a>我们来看看代码</h4><p>此示例的代码相当简单。我们使用了一个计时器，每当调用“Tick”事件时，都会切换 LED 的状态。</p>
<h5 id="计时器代码"><a href="#计时器代码" class="headerlink" title="计时器代码"></a>计时器代码</h5><p>下面说明如何使用 C# 语言设置计时器：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.timer = <span class="keyword">new</span> DispatcherTimer();</div><div class="line">    <span class="keyword">this</span>.timer.Interval = TimeSpan.FromMilliseconds(<span class="number">500</span>);</div><div class="line">    <span class="keyword">this</span>.timer.Tick += Timer_Tick;</div><div class="line">    <span class="keyword">this</span>.timer.Start();</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Timer_Tick</span>(<span class="params"><span class="keyword">object</span> sender, <span class="keyword">object</span> e</span>)</span></div><div class="line">&#123;</div><div class="line">    FlipLED();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="初始化-GPIO-引脚"><a href="#初始化-GPIO-引脚" class="headerlink" title="初始化 GPIO 引脚"></a>初始化 GPIO 引脚</h5><p>为了驱动 GPIO 引脚，首先我们需要对其进行初始化。以下是 C# 代码（请注意我们如何在 Windows.Devices.Gpio 命名空间中利用新 WinRT 类）：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Windows.Devices.Gpio;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitGPIO</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> gpio = GpioController.GetDefault();</div><div class="line"></div><div class="line">    <span class="comment">// Show an error if there is no GPIO controller</span></div><div class="line">    <span class="keyword">if</span> (gpio == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        pin = <span class="literal">null</span>;</div><div class="line">        GpioStatus.Text = <span class="string">"There is no GPIO controller on this device."</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pin = gpio.OpenPin(LED_PIN);</div><div class="line"></div><div class="line">    <span class="comment">// Show an error if the pin wasn't initialized properly</span></div><div class="line">    <span class="keyword">if</span> (pin == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        GpioStatus.Text = <span class="string">"There were problems initializing the GPIO pin."</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pin.Write(GpioPinValue.High);</div><div class="line">    pin.SetDriveMode(GpioPinDriveMode.Output);</div><div class="line"></div><div class="line">    GpioStatus.Text = <span class="string">"GPIO pin initialized correctly."</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让让我们稍稍细分一下此过程：</p>
<ul>
<li><p>首先，我们使用 <code>GpioController.GetDefault()</code> 获取 GPIO 控制器。</p>
</li>
<li><p>如果设备没有 GPIO 控制器，则此函数将返回 <code>null</code>。</p>
</li>
<li><p>然后，我们尝试通过使用 <code>LED_PIN</code> 值调用 <code>GpioController.OpenPin()</code> 来打开引脚。</p>
</li>
<li><p>获取 <code>pin</code> 后，我们会使用 <code>GpioPin.Write()</code> 函数将它设置为默认的关闭状态（高）。</p>
</li>
<li><p>我们还使用了 <code>GpioPin.SetDriveMode()</code> 函数将 <code>pin</code> 设置为以输出模式运行。</p>
</li>
</ul>
<h5 id="修改-GPIO-引脚的状态"><a href="#修改-GPIO-引脚的状态" class="headerlink" title="修改 GPIO 引脚的状态"></a>修改 GPIO 引脚的状态</h5><p>在具有<code>GpioOutputPin</code> 实例的访问权限后，没有必要再通过更改引脚状态来打开或关闭 LED。</p>
<p>若要打开 LED，只需将值 <code>GpioPinValue.Low</code> 写入引脚：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.pin.Write(GpioPinValue.Low);</div></pre></td></tr></table></figure>
<p>当然，写入 <code>GpioPinValue.High</code> 便会关闭 LED：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.pin.Write(GpioPinValue.High);</div></pre></td></tr></table></figure>
<p>记得我们已将 LED 的另一端连接到了 3.3 伏电源，因此，我们需要将引脚驱动到低位，使电流通过 LED。</p>
<blockquote>
<p>本文来源:<a href="http://ms-iot.github.io/content/zh-CN/GetStarted.htm" target="_blank" rel="external"><code>微软Windows IoT官网</code></a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置电脑&quot;&gt;&lt;a href=&quot;#设置电脑&quot; class=&quot;headerlink&quot; title=&quot;设置电脑&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://ms-iot.github.io/content/zh-CN/win10/SetupPCRPI.htm&quot; targe
    
    </summary>
    
      <category term="Raspberry Pi" scheme="http://blog.seay.me/categories/Raspberry-Pi/"/>
    
      <category term="Windows IoT" scheme="http://blog.seay.me/categories/Raspberry-Pi/Windows-IoT/"/>
    
    
      <category term="Windows IoT" scheme="http://blog.seay.me/tags/Windows-IoT/"/>
    
      <category term="Raspberry Pi 2" scheme="http://blog.seay.me/tags/Raspberry-Pi-2/"/>
    
      <category term="树莓派" scheme="http://blog.seay.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
</feed>
